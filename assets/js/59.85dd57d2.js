(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{466:function(s,a,t){"use strict";t.r(a);var n=t(21),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"hashmap-concurrenthashmap-concurrenthashset-hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-concurrenthashmap-concurrenthashset-hashset"}},[s._v("#")]),s._v(" Hashmap，ConcurrentHashMap，ConcurrentHashSet，HashSet")]),s._v(" "),t("p",[s._v("因为这些我个人都有了解过，目前就记录一些常见的问题配合图片方便记忆，用于备忘👀。")]),s._v(" "),t("h2",{attrs:{id:"hashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[s._v("#")]),s._v(" Hashmap")]),s._v(" "),t("p",[s._v("数据结构图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/946c3ddd77b0a44c8c441b7ba8b06a27.png",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/45323e4415df307ef3823d783e1077a6.png",alt:"0-00000031"}})]),s._v(" "),t("h3",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[s._v("#")]),s._v(" 常见问题：")]),s._v(" "),t("ol",[t("li",[s._v("Java1.8和1.7，HashMap有什么区别，做了什么优化")]),s._v(" "),t("li",[s._v("HashMap扩容过程，为什么要扩容2的倍数？为什么默认容量是16？")]),s._v(" "),t("li",[s._v("讲讲HashMap  get和put")]),s._v(" "),t("li",[s._v("hashmap 为什么可以插入空值")]),s._v(" "),t("li",[s._v("Hashmap 为什么线程不安全")]),s._v(" "),t("li",[s._v("hashmap判定重复是==还是equals")])]),s._v(" "),t("h4",{attrs:{id:"_1-java1-8和1-7-hashmap有什么区别-做了什么优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java1-8和1-7-hashmap有什么区别-做了什么优化"}},[s._v("#")]),s._v(" 1，Java1.8和1.7，HashMap有什么区别，做了什么优化")]),s._v(" "),t("p",[s._v("结构优化：由数组+链表转化为数组+链表+红黑树")]),s._v(" "),t("p",[s._v("插入优化：由头插法转化为尾插法")]),s._v(" "),t("p",[s._v("扩容优化：java8  中对 hashmap 扩容不是重新计算所有元素在数组的位置，而是我们使用的是 2 次幂的扩展(指长度扩为原来 2  倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动 2 次幂的位置，在扩充 HashMap 的时候，不需要像 JDK1.7 的实现那样重新计算 hash， 只需要看看原来的 hash 值新增的那个 bit 是 1 还是 0 就好了，是 0 的话索引没变，是 1 的话索引变成“原索引+oldCap”")]),s._v(" "),t("h4",{attrs:{id:"_2-hashmap扩容过程-为什么要扩容2的倍数-为什么默认容量是16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-hashmap扩容过程-为什么要扩容2的倍数-为什么默认容量是16"}},[s._v("#")]),s._v(" 2，HashMap扩容过程，为什么要扩容2的倍数？为什么默认容量是16？")]),s._v(" "),t("p",[s._v("扩容过程：分为两步")]),s._v(" "),t("ul",[t("li",[s._v("扩容：创建一个新的Entry空数组，长度是原数组的2倍。")]),s._v(" "),t("li",[s._v("ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组。")])]),s._v(" "),t("p",[s._v("这样是为了位运算的方便，"),t("strong",[s._v("位与运算比算数计算的效率高了很多")]),s._v("，之所以选择16，是为了服务将Key映射到index的算法。")]),s._v(" "),t("p",[s._v("是的我们通过Key的HashCode值去做位运算")]),s._v(" "),t("p",[s._v("选十六是工业时间的效果：为了实现均匀分布")]),s._v(" "),t("h4",{attrs:{id:"_3-讲讲hashmap-get和put"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-讲讲hashmap-get和put"}},[s._v("#")]),s._v(" 3，讲讲HashMap  get和put")]),s._v(" "),t("p",[t("strong",[s._v("put")])]),s._v(" "),t("p",[s._v("往map插入元素的时候首先通过对key hash然后与数组长度-1进行与运算((n-1)&hash)，都是2的次幂所以等同于取模，但是位运算的效率更高。找到数组中的位置之后，如果数组中没有元素直接存入，反之则判断key是否相同，key相同就覆盖，否则就会插入到链表的尾部，如果链表的长度超过8，则会转换成红黑树，最后判断数组长度是否超过默认的长度*负载因子也就是12，超过则进行扩容。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/c83536ef87158.jpg",alt:"img"}})]),s._v(" "),t("h4",{attrs:{id:"_4-hashmap-为什么可以插入空值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-hashmap-为什么可以插入空值"}},[s._v("#")]),s._v(" 4，hashmap 为什么可以插入空值")]),s._v(" "),t("p",[s._v("HashMap 中添加 key ==null 的 Entry 时会调用 putForNullKey 方法直接去遍历table[0]Entry 链表，寻找 e.key ==null 的 Entry 或者没有找到遍历结束")]),s._v(" "),t("p",[s._v("如果找到了 e.key==null，就保存 null 值对应的原值 oldValue，然后覆盖原值，并返回oldValue\n如果在 table[0]Entry 链表中没有找到就调用addEntry 方法添加一个 key 为 null 的 Entry")]),s._v(" "),t("h4",{attrs:{id:"_5-hashmap-为什么线程不安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-hashmap-为什么线程不安全"}},[s._v("#")]),s._v(" 5，Hashmap 为什么线程不安全")]),s._v(" "),t("p",[s._v("首先HashMap是"),t("strong",[s._v("线程不安全")]),s._v("的，其主要体现：")]),s._v(" "),t("p",[s._v("1.在jdk1.7中，在多线程环境下，扩容时会造成环形链或数据丢失。")]),s._v(" "),t("p",[s._v("2.在jdk1.8中，在多线程环境下，会发生数据覆盖的情况。")]),s._v(" "),t("h4",{attrs:{id:"_6-hashmap判定重复是-还是equals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-hashmap判定重复是-还是equals"}},[s._v("#")]),s._v(" 6，hashmap判定重复是==还是equals")]),s._v(" "),t("p",[s._v("当你把对象加入"),t("code",[s._v("HashSet")]),s._v("时，HashSet会先计算对象的"),t("code",[s._v("hashcode")]),s._v("值来判断对象加入的位置，同时也会与其他加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用"),t("code",[s._v("equals（）")]),s._v("方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让加入操作成功。")]),s._v(" "),t("p",[t("strong",[s._v("hashCode（）与equals（）的相关规定：")])]),s._v(" "),t("ol",[t("li",[s._v("如果两个对象相等，则hashcode一定也是相同的")]),s._v(" "),t("li",[s._v("两个对象相等,对两个equals方法返回true")]),s._v(" "),t("li",[s._v("两个对象有相同的hashcode值，它们也不一定是相等的")]),s._v(" "),t("li",[s._v("综上，equals方法被覆盖过，则hashCode方法也必须被覆盖")]),s._v(" "),t("li",[s._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。")])]),s._v(" "),t("p",[t("strong",[s._v("==与equals的区别")])]),s._v(" "),t("ol",[t("li",[s._v("==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同")]),s._v(" "),t("li",[s._v("==是指对内存地址进行比较 equals()是对字符串的内容进行比较")]),s._v(" "),t("li",[s._v("==指引用是否相同 equals()指的是值是否相同")])]),s._v(" "),t("h2",{attrs:{id:"hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[s._v("#")]),s._v(" HashSet")]),s._v(" "),t("p",[s._v("数据结构图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/4f75a708eaac2f5857ebfad96796adc4.png",alt:"img"}})]),s._v(" "),t("h3",{attrs:{id:"常见问题-因为是基于hashmap-实现的-所以主要问题也是问hashmap比较多"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题-因为是基于hashmap-实现的-所以主要问题也是问hashmap比较多"}},[s._v("#")]),s._v(" 常见问题（因为是基于hashmap 实现的，所以主要问题也是问hashmap比较多）")]),s._v(" "),t("p",[s._v("HashSet底层结构是怎样的？")]),s._v(" "),t("p",[s._v("如上图所示，就是HshMap的value都变成了一个Object对象")]),s._v(" "),t("h2",{attrs:{id:"concurrenthashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[s._v("#")]),s._v(" ConcurrentHashMap")]),s._v(" "),t("p",[s._v("数据结构图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyhVLAW08sszrgEKUamuEKR92tLGjq5XU8SCBVmGAgiaSp95mnibgngXjFjycLTSkDMpOEfKvZaFBzQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),s._v(" "),t("p",[t("strong",[s._v("JDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点 Node: 链表节点）：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/JDK1.8-ConcurrentHashMap-Structure.jpg",alt:"JDK1.8的ConcurrentHashMap"}})]),s._v(" "),t("h2",{attrs:{id:"concurrenthashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashset"}},[s._v("#")]),s._v(" ConcurrentHashSet")]),s._v(" "),t("p",[s._v("数据结构图（底层是基于ConcurrentHashMap实现的，所以问题主要和ConcurrentHashMap有关）")]),s._v(" "),t("h2",{attrs:{id:"linkedhashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[s._v("#")]),s._v(" LinkedHashMap")]),s._v(" "),t("p",[s._v("数据结构图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190711160733331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI4NjA5Mzg=,size_16,color_FFFFFF,t_70",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/09/fafad2940eb05.jpg",alt:"LinkedHashMap源码详细分析（JDK1.8）_"}})]),s._v(" "),t("h3",{attrs:{id:"常见问题-这个问的很少-因为也不常用-我个人在一次面试中有被问到-所以还是记录一下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题-这个问的很少-因为也不常用-我个人在一次面试中有被问到-所以还是记录一下"}},[s._v("#")]),s._v(" 常见问题（这个问的很少，因为也不常用，我个人在一次面试中有被问到，所以还是记录一下）")]),s._v(" "),t("p",[s._v("底层")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里实现LRU就主要是这几个方法， accessOrder定义是否会排序，如果为true，那么afterNodeAccess会将该该节点置于最后，get()方法也是")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOrDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" defaultValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" defaultValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accessOrder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("afterNodeAccess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accessOrder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("afterNodeAccess")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个方法会根据removeEldestEntry方法返回值进行判断（需要进行重写），如果为false会自动将头节点删除")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("afterNodeInsertion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" evict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// possibly remove eldest")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("evict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("first "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeEldestEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果要实现LRU，那么就可以重写这个方法，定义容量，如果超过容量，就会将最少使用的头节点删除")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeEldestEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" eldest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("ol",[t("li",[s._v("LinkedHashMap可以实现什么？LRU")]),s._v(" "),t("li",[s._v("底层数据结构是怎样的？双向链表+红黑树+数组")]),s._v(" "),t("li",[s._v("hashmap有什么区别？它是有序的")])])])}),[],!1,null,null,null);a.default=e.exports}}]);