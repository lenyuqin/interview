(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{468:function(t,a,s){"use strict";s.r(a);var e=s(21),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"常见的基础问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的基础问题"}},[t._v("#")]),t._v(" 常见的基础问题")]),t._v(" "),s("h2",{attrs:{id:"finally和return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finally和return"}},[t._v("#")]),t._v(" finally和return")]),t._v(" "),s("p",[t._v("finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语句，然后执行final最后返回结果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/7afeb0764dd37.png",alt:"image-20210318184355910"}})]),t._v(" "),s("p",[s("strong",[t._v("在以下 3 种特殊情况下，"),s("code",[t._v("finally")]),t._v(" 块不会被执行：")])]),t._v(" "),s("ol",[s("li",[t._v("在 "),s("code",[t._v("try")]),t._v(" 或 "),s("code",[t._v("finally")]),t._v("块中用了 "),s("code",[t._v("System.exit(int)")]),t._v("退出程序。但是，如果 "),s("code",[t._v("System.exit(int)")]),t._v(" 在异常语句之后，"),s("code",[t._v("finally")]),t._v(" 还是会被执行")]),t._v(" "),s("li",[t._v("程序所在的线程死亡。")]),t._v(" "),s("li",[t._v("关闭 CPU")])]),t._v(" "),s("p",[t._v("##java泛型了解么？什么是类型擦除？介绍一下常用的通配符？")]),t._v(" "),s("p",[t._v("Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。")]),t._v(" "),s("p",[t._v("Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。")]),t._v(" "),s("h2",{attrs:{id:"和-equals的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-equals的区别"}},[t._v("#")]),t._v(" == 和 equals的区别")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("==")])]),t._v(" : 它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。("),s("strong",[t._v("基本数据类型==比较的是值，引用数据类型==比较的是内存地址")]),t._v(")")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("equals()")])]),t._v(" : 它的作用也是判断两个对象是否相等，它不能用于比较基本数据类型的变量。"),s("code",[t._v("equals()")]),t._v("方法存在于"),s("code",[t._v("Object")]),t._v("类中，而"),s("code",[t._v("Object")]),t._v("类是所有类的直接或间接父类。")]),t._v(" "),s("p",[s("code",[t._v("equals()")]),t._v(" 方法存在两种使用情况：")]),t._v(" "),s("ul",[s("li",[t._v("情况 1：类没有覆盖 "),s("code",[t._v("equals()")]),t._v("方法。则通过"),s("code",[t._v("equals()")]),t._v("比较该类的两个对象时，等价于通过“==”比较这两个对象。使用的默认是 "),s("code",[t._v("Object")]),t._v("类"),s("code",[t._v("equals()")]),t._v("方法。")]),t._v(" "),s("li",[t._v("情况 2：类覆盖了 "),s("code",[t._v("equals()")]),t._v("方法。一般，我们都覆盖 "),s("code",[t._v("equals()")]),t._v("方法来两个对象的内容相等；若它们的内容相等，则返回 true(即，认为这两个对象相等)。")])]),t._v(" "),s("p",[t._v("补充")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("String")]),t._v(" 中的 "),s("code",[t._v("equals")]),t._v(" 方法是被重写过的，因为 "),s("code",[t._v("Object")]),t._v(" 的 "),s("code",[t._v("equals")]),t._v(" 方法是比较的对象的内存地址，而 "),s("code",[t._v("String")]),t._v(" 的 "),s("code",[t._v("equals")]),t._v(" 方法比较的是对象的值。")]),t._v(" "),s("li",[t._v("当创建 "),s("code",[t._v("String")]),t._v(" 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 "),s("code",[t._v("String")]),t._v(" 对象。")])]),t._v(" "),s("h2",{attrs:{id:"hashcode与equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode与equals"}},[t._v("#")]),t._v(" hashcode与equals")]),t._v(" "),s("p",[s("code",[t._v("hashCode()")]),t._v(" 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。"),s("code",[t._v("hashCode()")]),t._v("定义在 JDK 的 "),s("code",[t._v("Object")]),t._v(" 类中，这就意味着 Java 中的任何类都包含有 "),s("code",[t._v("hashCode()")]),t._v(" 函数。另外需要注意的是： "),s("code",[t._v("Object")]),t._v(" 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。")]),t._v(" "),s("p",[s("strong",[t._v("为什么要有 hashCode？")])]),t._v(" "),s("p",[t._v("当你把对象加入 "),s("code",[t._v("HashSet")]),t._v(" 时，"),s("code",[t._v("HashSet")]),t._v(" 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，"),s("code",[t._v("HashSet")]),t._v(" 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 "),s("code",[t._v("equals()")]),t._v(" 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，"),s("code",[t._v("HashSet")]),t._v(" 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head First Java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。")]),t._v(" "),s("p",[s("strong",[t._v("为什么重写 "),s("code",[t._v("equals")]),t._v(" 时必须重写 "),s("code",[t._v("hashCode")]),t._v(" 方法？")])]),t._v(" "),s("p",[t._v("如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。"),s("strong",[t._v("因此，equals 方法被覆盖过，则 "),s("code",[t._v("hashCode")]),t._v(" 方法也必须被覆盖。")])]),t._v(" "),s("p",[s("strong",[t._v("为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？")])]),t._v(" "),s("p",[t._v("因为 "),s("code",[t._v("hashCode()")]),t._v(" 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 "),s("code",[t._v("hashCode")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"java有-8-种基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java有-8-种基本数据类型"}},[t._v("#")]),t._v(" Java有 8 种基本数据类型")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("基本类型")]),t._v(" "),s("th",[t._v("位数")]),t._v(" "),s("th",[t._v("字节")]),t._v(" "),s("th",[t._v("默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("32")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("16")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("64")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("0L")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("16")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("'u0000'")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("32")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("0f")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("64")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("0d")])]),t._v(" "),s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("false")])])])]),t._v(" "),s("p",[t._v("注意")]),t._v(" "),s("ol",[s("li",[t._v("Java 里使用 long 类型的数据一定要在数值后面加上 "),s("strong",[t._v("L")]),t._v("，否则将作为整型解析：")]),t._v(" "),s("li",[s("code",[t._v("char a = 'h'")]),t._v("char :单引号，"),s("code",[t._v('String a = "hello"')]),t._v(" :双引号")])]),t._v(" "),s("h2",{attrs:{id:"深拷贝-vs-浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝-vs-浅拷贝"}},[t._v("#")]),t._v(" 深拷贝 vs 浅拷贝")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("浅拷贝")]),t._v("：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。")]),t._v(" "),s("li",[s("strong",[t._v("深拷贝")]),t._v("：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。")])]),t._v(" "),s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("p",[t._v("在java里，多态是同一个行为具有不同表现形式或形态的能力，即对象多种表现形式的体现。")]),t._v(" "),s("p",[t._v("就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，")]),t._v(" "),s("p",[t._v("使用多态必须满足三个必要条件。")]),t._v(" "),s("ol",[s("li",[t._v("继承")]),t._v(" "),s("li",[t._v("重写")]),t._v(" "),s("li",[t._v("父类引用指向子类")])]),t._v(" "),s("h2",{attrs:{id:"object类常见方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object类常见方法"}},[t._v("#")]),t._v(" Object类常见方法")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CloneNotSupportedException")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nanos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例被垃圾回收器回收的时候触发的操作")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("h2",{attrs:{id:"线程池和连接池的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池和连接池的区别"}},[t._v("#")]),t._v(" 线程池和连接池的区别")]),t._v(" "),s("h3",{attrs:{id:"线程池流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池流程"}},[t._v("#")]),t._v(" 线程池流程：")]),t._v(" "),s("p",[t._v("先启动若干数量的线程，并让这些线程都处于睡眠状态，当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。")]),t._v(" "),s("h3",{attrs:{id:"数据库连接池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池"}},[t._v("#")]),t._v(" 数据库连接池")]),t._v(" "),s("p",[t._v("一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并将这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。")]),t._v(" "),s("h2",{attrs:{id:"java-当中的四种引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-当中的四种引用"}},[t._v("#")]),t._v(" java 当中的四种引用")]),t._v(" "),s("p",[t._v("强引用，软引用，弱引用，虚引用。不同的引用类型主要体现在 GC 上:")]),t._v(" "),s("p",[s("code",[t._v("强引用")]),t._v("：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError  错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为 null，这样一来的话，JVM 在合适的时间就会回收该对象。")]),t._v(" "),s("p",[s("code",[t._v("软引用")]),t._v("：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。")]),t._v(" "),s("p",[s("code",[t._v("弱引用")]),t._v("：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM  进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象。")]),t._v(" "),s("p",[s("code",[t._v("虚引用")]),t._v("：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。")]),t._v(" "),s("h2",{attrs:{id:"重载和重写的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[t._v("#")]),t._v(" 重载和重写的区别?")]),t._v(" "),s("p",[t._v("方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。")]),t._v(" "),s("p",[t._v("重载发生在一个类中，同名的方法如果有不同的参数列表（类型不同、个数不同、顺序不同）则视为重载。")]),t._v(" "),s("p",[t._v("重写发生在子类与父类之间，重写要求子类重写之后的方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。")]),t._v(" "),s("h2",{attrs:{id:"string-和-stringbuffer、stringbuilder-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-和-stringbuffer、stringbuilder-的区别是什么"}},[t._v("#")]),t._v(" String 和 StringBuﬀer、StringBuilder 的区别是什么？")]),t._v(" "),s("h3",{attrs:{id:"可变性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可变性"}},[t._v("#")]),t._v(" 可变性")]),t._v(" "),s("p",[t._v("简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，private　final　char　value[]，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。")]),t._v(" "),s("p",[t._v("StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。")]),t._v(" "),s("p",[t._v("AbstractStringBuilder.java")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractStringBuilder")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Appendable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractStringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractStringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"线程安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全性"}},[t._v("#")]),t._v(" 线程安全性")]),t._v(" "),s("p",[t._v("String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。")]),t._v(" "),s("h3",{attrs:{id:"性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),s("p",[t._v("每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。")]),t._v(" "),s("h3",{attrs:{id:"对于三者使用的总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对于三者使用的总结"}},[t._v("#")]),t._v(" 对于三者使用的总结：")]),t._v(" "),s("ul",[s("li",[t._v("操作少量的数据: 适用String")]),t._v(" "),s("li",[t._v("单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder")]),t._v(" "),s("li",[t._v("多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer")])]),t._v(" "),s("h2",{attrs:{id:"string字符串有长度限制吗-是多少"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string字符串有长度限制吗-是多少"}},[t._v("#")]),t._v(" String字符串有长度限制吗？是多少？")]),t._v(" "),s("p",[t._v("答：首先字符串的内容是由一个字符数组 char[] 来存储的，由于数组的长度及索引是整数，且String类中返回字符串长度的方法length() 的返回值也是int ，所以通过查看java源码中的类Integer我们可以看到Integer的最大范围是2^31 -1,由于数组是从0开始的，所以数组的最大长度可以使【0~2^31-1】通过计算是大概4GB。")]),t._v(" "),s("p",[t._v("但是通过翻阅java虚拟机手册对class文件格式的定义以及常量池中对String类型的结构体定义我们可以知道对于索引定义了u2，就是无符号占2个字节，2个字节可以表示的最大范围是2^16 -1 = 65535。")]),t._v(" "),s("p",[t._v("其实是65535，但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。")]),t._v(" "),s("h2",{attrs:{id:"jdk动态代理和cglib动态代理的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理和cglib动态代理的区别"}},[t._v("#")]),t._v(" JDK动态代理和CGLIB动态代理的区别")]),t._v(" "),s("p",[t._v("SpringAOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：")]),t._v(" "),s("p",[t._v("（1）JDK动态代理"),s("strong",[t._v("只提供接口的代理，不支持类的代理")]),t._v("。核心InvocationHandler接口和Proxy类，InvocationHandler通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用InvocationHandler动态创建一个符合某一接口的的实例,生成目标类的代理对象。")]),t._v(" "),s("p",[t._v("（2）如果代理类没有实现InvocationHandler接口，那么SpringAOP会选择使用CGLIB来动态代理目标类。CGLIB（CodeGenerationLibrary），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过"),s("strong",[t._v("继承的方式")]),t._v("做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。")]),t._v(" "),s("p",[t._v("静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而SpringAOP则无需特定的编译器处理。")]),t._v(" "),s("h2",{attrs:{id:"抽象类和接口的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类和接口的区别是什么"}},[t._v("#")]),t._v(" 抽象类和接口的区别是什么？")]),t._v(" "),s("p",[s("code",[t._v("实现")]),t._v("：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。")]),t._v(" "),s("p",[s("code",[t._v("构造函数")]),t._v("：抽象类可以有构造函数；接口不能有。")]),t._v(" "),s("p",[s("code",[t._v("实现数量")]),t._v("：类可以实现很多个接口；但只能继承一个抽象类【java只支持单继承】。")]),t._v(" "),s("p",[s("code",[t._v("访问修饰符")]),t._v("：接口中的方法默认使用 public 修饰；抽象类中的抽象方法可以使用Public和Protected修饰，如果抽象方法修饰符为Private，则报错：The abstract method 方法名 in type Test can only set a visibility modifier, one of public or protected。接口中除了static、final变量，不能有其他变量，而抽象类中则不一定")]),t._v(" "),s("p",[s("code",[t._v("设计层面")]),t._v("：抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。")]),t._v(" "),s("h2",{attrs:{id:"final-finalize和finally的不同之处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final-finalize和finally的不同之处"}},[t._v("#")]),t._v(" final,finalize和finally的不同之处")]),t._v(" "),s("p",[t._v("final是一个修饰符，可以修饰变量、方法和类。如果final修饰变量，意味着该变量的值在初始化后不能被改变。finalize方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用finalize没有保证。finally是一个关键字，与try和catch一起用于异常的处理。finally块一定会被执行，无论在try块中是否有发生异常。")])])}),[],!1,null,null,null);a.default=n.exports}}]);