(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{482:function(e,r,t){"use strict";t.r(r);var o=t(21),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("#Docker")]),e._v(" "),t("h2",{attrs:{id:"docker的底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker的底层原理"}},[e._v("#")]),e._v(" docker的底层原理")]),e._v(" "),t("p",[e._v("Docker 采用了 C/S 架构，包括客户端和服务端。Docker 守护进程 （ Daemon ）作为服务端接受来自客户端的请求，并处理这些请求（创建、运行、分发容器）。")]),e._v(" "),t("p",[e._v("利用了linux的命名空间")]),e._v(" "),t("p",[e._v("深入可以参考："),t("a",{attrs:{href:"https://draveness.me/docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 核心技术与实现原理 - 面向信仰编程 (draveness.me)(opens new window)"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"为啥docker比vm等虚拟机更快"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为啥docker比vm等虚拟机更快"}},[e._v("#")]),e._v(" 为啥docker比VM等虚拟机更快")]),e._v(" "),t("ol",[t("li",[e._v("docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势")]),e._v(" "),t("li",[e._v("Docker利用的是宿主机的内核，而不需要Guest OS，因此，当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统，避免了引导、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统则省略了这个过程，因此新建一个Docker容器只需要几秒钟")]),e._v(" "),t("li",[e._v("使用了Hypervisor")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/K_520_W/article/details/111304146",target:"_blank",rel:"noopener noreferrer"}},[e._v("为什么Docker比VM等虚拟机快_花&败-CSDN博客(opens new window)"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"kubernetes和docker到底有啥关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes和docker到底有啥关系"}},[e._v("#")]),e._v(" Kubernetes和Docker到底有啥关系？")]),e._v(" "),t("ol",[t("li",[e._v("Docker是一个开源的应用容器引擎，开发者可以打包他们的应用及依赖到一个可移植的容器中，发布到流行的Linux机器上，也可实现虚拟化。")]),e._v(" "),t("li",[e._v("k8s是一个开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://my.oschina.net/u/588516/blog/3069671",target:"_blank",rel:"noopener noreferrer"}},[e._v("最简明易懂的docker和k8s的关系 - bengozhong的个人空间 - OSCHINA - 中文开源技术交流社区(opens new window)"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"如何实现资源隔离和权限控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现资源隔离和权限控制"}},[e._v("#")]),e._v(" 如何实现资源隔离和权限控制")]),e._v(" "),t("ul",[t("li",[e._v("使用命名空间来实现隔离")]),e._v(" "),t("li",[e._v("启用了Mount Namespace，并将自己打包的文件系统挂载好，就可以实现每个容器仅看到自己的文件，实现文件资源的隔离。")]),e._v(" "),t("li",[e._v("如何实现CPU，内存等资源控制呢？使用Cgroups，这个可以实现对CPU资源控制")])])])}),[],!1,null,null,null);r.default=n.exports}}]);