(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{469:function(a,t,s){"use strict";s.r(t);var n=s(21),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"线程的6种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的6种状态"}},[a._v("#")]),a._v(" 线程的6种状态")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/6778942ce47c4.jpeg",alt:"线程状态图"}})]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("初始(NEW)")]),a._v("：新创建了一个线程对象，但还没有调用start()方法。")]),a._v(" "),s("li",[s("strong",[a._v("运行(RUNNABLE)")]),a._v("：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。 线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。")]),a._v(" "),s("li",[s("strong",[a._v("阻塞(BLOCKED)")]),a._v("：表示线程阻塞于锁。")]),a._v(" "),s("li",[s("strong",[a._v("等待(WAITING)")]),a._v("：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。")]),a._v(" "),s("li",[s("strong",[a._v("超时等待(TIMED_WAITING)")]),a._v("：该状态不同于WAITING，它可以在指定的时间后自行返回。")]),a._v(" "),s("li",[s("strong",[a._v("终止(TERMINATED)")]),a._v("：表示该线程已经执行完毕。")])]),a._v(" "),s("h2",{attrs:{id:"synchronized和reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和reentrantlock"}},[a._v("#")]),a._v(" synchronized和ReentrantLock")]),a._v(" "),s("h3",{attrs:{id:"synchronized有如下3种使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized有如下3种使用方式"}},[a._v("#")]),a._v(" synchronized有如下3种使用方式")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("普通同步方法，锁是当前实例对象")])]),a._v(" "),s("li",[s("p",[a._v("静态同步方法，锁是当前类的class对象")])]),a._v(" "),s("li",[s("p",[a._v("同步方法块，锁是括号里面的对象")])])]),a._v(" "),s("p",[a._v("当一个线程访问同步代码块时，需要获得锁才能执行，当退出或者抛出异常的时候要释放锁。那么是怎么实现的呢，我们来看一段代码")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SynchronizedTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("我们用javap来分析一下编译后的class文件，看看synchronized如何实现的")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124145929309.png",alt:""}})]),a._v(" "),s("p",[a._v("从这个截图上可以看出，同步代码块是使用monitorenter和monitorexit指令实现的， monitorenter插入到代码块开始的地方，monitorexit插入到代码块结束的地方，当monitor被持有后，就处于锁定状态，也就是上锁了。")]),a._v(" "),s("p",[a._v("下面我们深入分析一下synchronized实现锁的两个重要的概念：Java对象头和monitor")]),a._v(" "),s("h3",{attrs:{id:"java对象头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java对象头"}},[a._v("#")]),a._v(" Java对象头：")]),a._v(" "),s("p",[a._v("synchronized的锁是存在对象头里的，对象头由两部分数据组成：Mark Word（标记字段）、Klass Pointer（类型指针）")]),a._v(" "),s("p",[a._v("Mark Word存储了对象自身运行时数据，如hashcode、GC分代年龄、锁状态标志、线程持有的锁、偏向锁ID等等。是实现轻量级锁和偏向锁的关键，Klass Pointer是Java对象指向类元数据的指针，jvm通过这个指针确定这个对象是哪个类的实例")]),a._v(" "),s("h3",{attrs:{id:"monitor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#monitor"}},[a._v("#")]),a._v(" monitor：")]),a._v(" "),s("p",[a._v("每个Java对象从娘胎里出来就带着一把看不见的锁， 叫做内部锁或者monitor锁，我们可以把它理解成一种同步机制，它是线程私有的数据结构，")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124150120986.png",alt:""}})]),a._v(" "),s("p",[a._v("monitor的结构如下：")]),a._v(" "),s("ul",[s("li",[a._v("Owner：初始时为NULL表示当前没有任何线程拥有该monitor record，当线程成功拥有该锁后保存线程唯一标识，当锁被释放时又设置为NULL；")]),a._v(" "),s("li",[a._v("EntryQ:关联一个系统互斥锁（semaphore），阻塞所有试图锁住monitor record失败的线程。")]),a._v(" "),s("li",[a._v("RcThis:表示blocked或waiting在该monitor record上的所有线程的个数。")]),a._v(" "),s("li",[a._v("Nest:用来实现重入锁的计数。")]),a._v(" "),s("li",[a._v("HashCode:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。")]),a._v(" "),s("li",[a._v("Candidate:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。")])]),a._v(" "),s("p",[a._v("同步方法的时候同步方法的时候，一旦执行到这个方法，就会先判断是否有标志位，然后，ACC_SYNCHRONIZED会去隐式调用刚才的两个指令：monitorenter和monitorexit")]),a._v(" "),s("h3",{attrs:{id:"锁升级过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁升级过程"}},[a._v("#")]),a._v(" 锁升级过程")]),a._v(" "),s("p",[a._v("为什么需要锁升级呢，因为我们monitor默认使用的是Mutex Lock，这东西实际上是一个重锁，非常消耗资源，在JDK6中，为了减少性能消耗，就引入了锁升级的概念，具体过程如下")]),a._v(" "),s("p",[a._v("无锁->偏向锁->轻量级锁 ->重量级锁 （过程不可逆）")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/626fc95178e8b.jpg",alt:"img"}})]),a._v(" "),s("h4",{attrs:{id:"无锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无锁"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/f47c61/#%E6%97%A0%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[a._v("#"),s("OutboundLink")],1),a._v("无锁")]),a._v(" "),s("p",[a._v("无锁不会对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。")]),a._v(" "),s("p",[a._v("无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。本质上就是通过CAS来实现的")]),a._v(" "),s("h4",{attrs:{id:"偏向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#偏向锁"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/f47c61/#%E5%81%8F%E5%90%91%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[a._v("#"),s("OutboundLink")],1),a._v("偏向锁")]),a._v(" "),s("p",[a._v("偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。")]),a._v(" "),s("p",[a._v("在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。")]),a._v(" "),s("p",[a._v("当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。")]),a._v(" "),s("p",[a._v("偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。")]),a._v(" "),s("p",[a._v("偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。")]),a._v(" "),s("h4",{attrs:{id:"轻量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轻量级锁"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/f47c61/#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[a._v("#"),s("OutboundLink")],1),a._v("轻量级锁")]),a._v(" "),s("p",[a._v("是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。")]),a._v(" "),s("p",[a._v("在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。")]),a._v(" "),s("p",[a._v("拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。")]),a._v(" "),s("p",[a._v("如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。")]),a._v(" "),s("p",[a._v("如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。")]),a._v(" "),s("p",[a._v("若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。")]),a._v(" "),s("h4",{attrs:{id:"重量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重量级锁"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/f47c61/#%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[a._v("#"),s("OutboundLink")],1),a._v("重量级锁")]),a._v(" "),s("p",[a._v("升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。")]),a._v(" "),s("p",[a._v("综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞")]),a._v(" "),s("h3",{attrs:{id:"对象锁和类锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象锁和类锁"}},[a._v("#")]),a._v(" 对象锁和类锁")]),a._v(" "),s("p",[a._v("java的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个实例对象上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的实例对象可以有很多个，但是每个类只有一个class对象，所以不同实例对象的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。")]),a._v(" "),s("p",[s("strong",[a._v("对象锁")])]),a._v(" "),s("p",[a._v("当一个对象中有同步方法或者同步块，线程调用此对象进入该同步区域时，必须获得对象锁。如果此对象的对象锁被其他调用者占用，则进入阻塞队列，等待此锁被释放（同步块正常返回或者抛异常终止，由JVM自动释放对象锁）。 注意，方法锁也是一种对象锁。当一个线程访问一个带synchronized方法时，由于对象锁的存在，所有加synchronized的方法都不能被访问（前提是在多个线程调用的是同一个对象实例中的方法）。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"我是对象锁也是方法锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"我是对象锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12")]),a._v(" "),s("p",[s("strong",[a._v("类锁")])]),a._v(" "),s("p",[a._v("一个class其中的静态方法和静态变量在内存中只会加载和初始化一份，所以，一旦一个静态的方法被申明为synchronized，此类的所有的实例化对象在调用该方法时，共用同一把锁，称之为类锁。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"我是第一种类锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"我是第二种类锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("h3",{attrs:{id:"深一层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深一层"}},[a._v("#")]),a._v(" 深一层")]),a._v(" "),s("p",[a._v("如果再深入到源码来说，synchronized实际上有两个队列waitSet和entryList。")]),a._v(" "),s("ol",[s("li",[a._v("当多个线程进入同步代码块时，首先进入entryList")]),a._v(" "),s("li",[a._v("有一个线程获取到monitor锁后，就赋值给当前线程，并且计数器+1")]),a._v(" "),s("li",[a._v("如果线程调用wait方法，将释放锁，当前线程置为null，计数器-1，同时进入waitSet等待被唤醒，调用notify或者notifyAll之后又会进入entryList竞争锁")]),a._v(" "),s("li",[a._v("如果线程执行完毕，同样释放锁，计数器-1，当前线程置为null")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/c82b1212a6bc0.jpg",alt:"img"}})]),a._v(" "),s("h2",{attrs:{id:"synchronized-和-reentrantlock-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-reentrantlock-的区别"}},[a._v("#")]),a._v(" synchronized 和 ReentrantLock 的区别")]),a._v(" "),s("p",[a._v("synchronized 是和 if、else、for、while 一样的关键字，ReentrantLock 是类，这是二者的本质区别。")]),a._v(" "),s("p",[a._v("既然 ReentrantLock 是类，那么它就提供了比 synchronized 更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock 比 synchronized 的扩展性体现在几点上：")]),a._v(" "),s("p",[a._v("（1）ReentrantLock 可以对获取锁的等待时间进行设置，这样就避免了死锁")]),a._v(" "),s("p",[a._v("（2）ReentrantLock 可以获取各种锁的信息")]),a._v(" "),s("p",[a._v("（3）ReentrantLock 可以灵活地实现多路通知")]),a._v(" "),s("p",[a._v("另外，二者的锁机制其实也是不一样的:ReentrantLock 底层调用的是 Unsafe 的 park 方法加锁，synchronized 操作的应该是对象头中 mark word。")]),a._v(" "),s("h2",{attrs:{id:"voliate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#voliate"}},[a._v("#")]),a._v(" voliate")]),a._v(" "),s("h3",{attrs:{id:"voliate三特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#voliate三特性"}},[a._v("#")]),a._v(" voliate三特性")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("保证可见性；")])]),a._v(" "),s("li",[s("p",[a._v("不保证复合操作的原子性；")])]),a._v(" "),s("li",[s("p",[a._v("禁止指令重排。")])])]),a._v(" "),s("h3",{attrs:{id:"第一-可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一-可见性"}},[a._v("#")]),a._v(" 第一：可见性")]),a._v(" "),s("p",[a._v("先给大家介绍一下JMM的内存模型")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124151208742.png",alt:""}})]),a._v(" "),s("p",[a._v("我们定义的共享变量就是存在主内存中，每个线程内的变量是在工作内存中操作的，当一个线程A修改了主内存里的一个共享变量，这个时候线程B是不知道这个值已经修改了，因为线程之间的工作内存是互相不可见的")]),a._v(" "),s("p",[a._v("那么这个时候voliate的作用就是让A、B线程可以互相感知到对方对共享变量的修改，当线程A更新了共享数据，会将数据刷回到主内存中，而线程B每次去读共享数据时去主内存中读取，这样就保证了线程之间的可见性")]),a._v(" "),s("p",[a._v("这种保证内存可见性的机制是：内存屏障(memory barrier)")]),a._v(" "),s("p",[a._v("内存屏障分为两种：Load Barrier 和 Store Barrier即读屏障和写屏障。")]),a._v(" "),s("p",[a._v("内存屏障有两个作用：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("1.阻止屏障两侧的指令重排序；")])]),a._v(" "),s("li",[s("p",[a._v("2.强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。")])])]),a._v(" "),s("h3",{attrs:{id:"第三-有序性-禁止jvm对代码进行重排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三-有序性-禁止jvm对代码进行重排序"}},[a._v("#")]),a._v(" 第三：有序性（禁止jvm对代码进行重排序）")]),a._v(" "),s("p",[a._v("有序性：即程序执行的顺序按照代码的先后顺序执行。")]),a._v(" "),s("p",[a._v("一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的，但是不能随意重排序，不是你想怎么排序就怎么排序，它需要满足以下两个条件：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("在单线程环境下不能改变程序运行的结果；")])]),a._v(" "),s("li",[s("p",[a._v("存在数据依赖关系的不允许重排序")])])]),a._v(" "),s("h2",{attrs:{id:"说一个voliate的用法-这里涉及到了单例知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一个voliate的用法-这里涉及到了单例知识"}},[a._v("#")]),a._v(" 说一个voliate的用法(这里涉及到了单例知识)")]),a._v(" "),s("p",[a._v("什么是DCL呢，其实就是double check lock的简写")]),a._v(" "),s("p",[a._v("DCL很多人都在单利中用过（"),s("code",[a._v("单例还有很多其他写法，具体看涉及模式复习题")]),a._v("），如下这种写法：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("                              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 3")]),a._v("\n                   singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("表面上这个代码看起来很完美，但是其实有问题")]),a._v(" "),s("p",[a._v("先说一下他完美的一面吧：")]),a._v(" "),s("p",[a._v("1、如果检查第一个singleton不为null,则不需要执行下面的加锁动作，极大提高了程序的性能；")]),a._v(" "),s("p",[a._v("2、如果第一个singleton为null,即使有多个线程同一时间判断，但是由于synchronized的存在，只会有一个线程能够创建对象；")]),a._v(" "),s("p",[a._v("3、当第一个获取锁的线程创建完成后singleton对象后，其他的在第二次判断singleton一定不会为null，则直接返回已经创建好的singleton对象；")]),a._v(" "),s("p",[s("strong",[a._v("但是到底是哪里有错误呢")])]),a._v(" "),s("p",[a._v("首先创建一个对象分为三个步骤：")]),a._v(" "),s("p",[a._v("1、分配内存空间")]),a._v(" "),s("p",[a._v("2、初始化对象")]),a._v(" "),s("p",[a._v("3、讲内存空间的地址赋值给对象的引用")]),a._v(" "),s("p",[a._v("但是上面我讲了，jvm可能会对代码进行重排序，所以2和3可能会颠倒，")]),a._v(" "),s("p",[a._v("就会变成 1 —> 3 —> 2的过程，")]),a._v(" "),s("p",[a._v("那么当第一个线程A抢到锁执行初始化对象时，发生了代码重排序，3和2颠倒了，这个时候对象对象还没初始化，但是对象的引用已经不为空了，")]),a._v(" "),s("p",[a._v("所以当第二个线程B遇到第一个if判断时不为空，这个时候就会直接返回对象，但此时A线程还没执行完步骤2（初始化对象）。就会造成线程B其实是拿到一个空的对象。造成空指针问题。")]),a._v(" "),s("h3",{attrs:{id:"解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" 解决方案：")]),a._v(" "),s("p",[a._v("既然上面的问题是由于jvm对代码重排序造成的，那我们禁止重排序不就好了吗？")]),a._v(" "),s("p",[a._v("voliate刚好可以禁止重排序，这样就不会存在2和3颠倒的问题了，所以改造后的代码如下：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//通过volatile关键字来确保安全")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                   singleton "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("h2",{attrs:{id:"说说-synchronized-关键字和-volatile-关键字的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说-synchronized-关键字和-volatile-关键字的区别"}},[a._v("#")]),a._v(" 说说 synchronized 关键字和 volatile 关键字的区别？")]),a._v(" "),s("p",[a._v("volatile 是变量修饰符；synchronized 是修饰类、方法、代码段。")]),a._v(" "),s("p",[a._v("volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。")]),a._v(" "),s("p",[a._v("volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。")]),a._v(" "),s("h2",{attrs:{id:"aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[a._v("#")]),a._v(" AQS")]),a._v(" "),s("p",[a._v("全称：AbstractQueuedSynchronizer，是JDK提供的一个同步框架，内部维护着FIFO双向队列，即CLH同步队列。")]),a._v(" "),s("p",[a._v("AQS依赖它来完成同步状态的管理（voliate修饰的state，用于标志是否持有锁）。")]),a._v(" "),s("p",[a._v("如果获取同步状态state失败时，会将当前线程及等待信息等构建成一个Node，将Node放到FIFO队列里，同时阻塞当前线程，当线程将同步状态state释放时，会把FIFO队列中的首节的唤醒，使其获取同步状态state。")]),a._v(" "),s("p",[a._v("很多JUC包下的锁都是基于AQS实现的")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124151924748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2huanNqc2Fj,size_16,color_FFFFFF,t_70",alt:"FIFO结构图"}})]),a._v(" "),s("h3",{attrs:{id:"独占式同步状态过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#独占式同步状态过程"}},[a._v("#")]),a._v(" 独占式同步状态过程")]),a._v(" "),s("p",[a._v("在AQS中维护着一个上面的FIFO的同步队列，当线程获取同步状态失败后，则会加入到这个CLH同步队列的对尾并一直保持着自旋。")]),a._v(" "),s("p",[a._v("在CLH同步队列中的线程在自旋时会判断其前驱节点是否为首节点，如果为首节点则不断尝试获取同步状态sate，获取成功则退出CLH同步队列。当线程执行完逻辑后，会释放同步状态sate，释放后会唤醒其后继节点。")]),a._v(" "),s("p",[a._v("tryAcquire方法尝试去获取锁，获取成功返回true，否则返回false。该方法由继承AQS的子类自己实现。采用了"),s("code",[a._v("模板方法设计模式")]),a._v("。")]),a._v(" "),s("p",[a._v("如：ReentrantLock的Sync内部类，Sync的子类：NonfairSync和")]),a._v(" "),s("h3",{attrs:{id:"aqs定义两种资源共享方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs定义两种资源共享方式"}},[a._v("#")]),a._v(" AQS定义两种资源共享方式")]),a._v(" "),s("p",[a._v("1、独占 ( Exclusive )：只有一个线程能执行，其原理是看哪个线程先把state +1 ，谁就抢到了锁，如 ReentrantLock。又可分为公平锁和非公平锁：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("公平锁：按照线程在队列中的排队顺序，先到者先拿到锁")])]),a._v(" "),s("li",[s("p",[a._v("非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的，所以非公平锁效率较高")])])]),a._v(" "),s("p",[a._v("2、共享 ( Share )：多个线程可同时执行，其原理就是多个线程去操作state字段，来一个线程就 +1，来一个线程就 +1")]),a._v(" "),s("p",[a._v("线程运行结束后state -1 ，一直减到0，就释放锁了。如Semaphore、CountDownLatch。")]),a._v(" "),s("h2",{attrs:{id:"threadlocal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[a._v("#")]),a._v(" ThreadLocal")]),a._v(" "),s("p",[a._v("很多小伙伴认为ThreadLocal是多线程同步机制的一种，其实不然，他是为多线程环境下为变量线程安全提供的一种解决思路，他是解决多线程下成员变量的安全问题，不是解决多线程下共享变量的安全问题。")]),a._v(" "),s("p",[a._v("线程同步机制是多个线程共享一个变量，而ThreadLocal是每个线程创建一个自己的单独变量副本，所以每个线程都可以独立的改变自己的变量副本。并且不会影响其他线程的变量副本。")]),a._v(" "),s("h3",{attrs:{id:"threadlocalmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocalmap"}},[a._v("#")]),a._v(" ThreadLocalMap")]),a._v(" "),s("p",[a._v("ThreadLocal内部有一个非常重要的内部类：ThreadLocalMap，该类才是真正实现线程隔离机制的关键，ThreadLocalMap内部结构类似于map，由键值对key和value组成一个Entry，key为ThreadLocal本身，value是对应的线程变量副本")]),a._v(" "),s("p",[s("code",[a._v("注意：")])]),a._v(" "),s("p",[a._v("1、ThreadLocal本身不存储值，他只是提供一个查找到值的key给你。")]),a._v(" "),s("p",[a._v("2、ThreadLocal包含在Thread中，不是Thread包含在ThreadLocal中。")]),a._v(" "),s("p",[s("strong",[a._v("ThreadLocalMap 和HashMap的功能类似，但是实现上却有很大的不同：")])]),a._v(" "),s("ul",[s("li",[a._v("HashMap 的数据结构是数组+链表")]),a._v(" "),s("li",[a._v("ThreadLocalMap的数据结构仅仅是数组")]),a._v(" "),s("li",[a._v("HashMap 是通过链地址法解决hash 冲突的问题")]),a._v(" "),s("li",[a._v("ThreadLocalMap 是通过开放地址法来解决hash 冲突的问题")]),a._v(" "),s("li",[a._v("HashMap 里面的Entry 内部类的引用都是强引用")]),a._v(" "),s("li",[a._v("ThreadLocalMap里面的Entry 内部类中的key 是弱引用，value 是强引用")])]),a._v(" "),s("h3",{attrs:{id:"链地址法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链地址法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("链地址法：")])]),a._v(" "),s("p",[a._v("这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。")]),a._v(" "),s("h3",{attrs:{id:"开放地址法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放地址法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("开放地址法：")])]),a._v(" "),s("p",[a._v("这种方法的基本思想是一旦发生了冲突，就去寻找下一个空的散列地址(这非常重要，源码都是根据这个特性，必须理解这里才能往下走)，只要散列表足够大，空的散列地址总能找到，并将记录存入。")]),a._v(" "),s("h3",{attrs:{id:"链地址法和开放地址法的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链地址法和开放地址法的优缺点"}},[a._v("#")]),a._v(" "),s("strong",[a._v("链地址法和开放地址法的优缺点：")])]),a._v(" "),s("p",[s("strong",[a._v("开放地址法：")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("容易产生堆积问题，不适于大规模的数据存储。")])]),a._v(" "),s("li",[s("p",[a._v("散列函数的设计对冲突会有很大的影响，插入时可能会出现多次冲突的现象。")])]),a._v(" "),s("li",[s("p",[a._v("删除的元素是多个冲突元素中的一个，需要对后面的元素作处理，实现较复杂。")])])]),a._v(" "),s("p",[s("strong",[a._v("链地址法：")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("处理冲突简单，且无堆积现象，平均查找长度短。")])]),a._v(" "),s("li",[s("p",[a._v("链表中的结点是动态申请的，适合构造表不能确定长度的情况。")])]),a._v(" "),s("li",[s("p",[a._v("删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。")])]),a._v(" "),s("li",[s("p",[a._v("指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间。")])])]),a._v(" "),s("h3",{attrs:{id:"threadlocalmap-采用开放地址法原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocalmap-采用开放地址法原因"}},[a._v("#")]),a._v(" ThreadLocalMap 采用开放地址法原因")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("ThreadLocal 中看到一个属性 HASH_INCREMENT = 0x61c88647 ，0x61c88647 是一个神奇的数字，让哈希码能均匀的分布在2的N次方的数组里, 即 Entry[] table，关于这个神奇的数字google 有很多解析，这里就不重复说了")])]),a._v(" "),s("li",[s("p",[a._v("ThreadLocal 往往存放的数据量不会特别大（而且key 是弱引用又会被垃圾回收，及时让数据量更小），这个时候开放地址法简单的结构会显得更省空间，同时数组的查询效率也是非常高，加上第一点的保障，冲突概率也低")])])]),a._v(" "),s("h3",{attrs:{id:"thread、threadlocal、threadlocalmap之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread、threadlocal、threadlocalmap之间的关系"}},[a._v("#")]),a._v(" Thread、ThreadLocal、ThreadLocalMap之间的关系")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124182202250.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/202101241822368.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210124182301869.png",alt:""}})]),a._v(" "),s("p",[a._v("从上面的结构图，我们已经窥见ThreadLocal的核心机制：")]),a._v(" "),s("p",[a._v("每个Thread线程内部都有一个Map。Map里面存储线程本地对象（key）和线程的变量副本（value）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。所以对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，彼此之间互不干扰。")]),a._v(" "),s("h3",{attrs:{id:"内存泄露问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露问题"}},[a._v("#")]),a._v(" 内存泄露问题：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 部分源码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Entry")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** The value associated with this ThreadLocal. */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("从上面源码可以看出ThreadLocalMap中使用的 key 为ThreadLocal的弱引用，而 value 是强引用。")]),a._v(" "),s("p",[a._v("所以，如果ThreadLocal没有被外部强引用的情况下，在垃圾回收的时候会 key 会被清理掉，而 value 不会被清理掉。")]),a._v(" "),s("p",[a._v("这样一来，ThreadLocalMap中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。")]),a._v(" "),s("p",[a._v("我们上面介绍的get、set、remove等方法中，都会对key为null的Entry进行清除（expungeStaleEntry方法，将Entry的value清空，等下一次垃圾回收时，这些Entry将会被彻底回收）。")]),a._v(" "),s("h3",{attrs:{id:"如何避免内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何避免内存泄漏"}},[a._v("#")]),a._v(" 如何避免内存泄漏？")]),a._v(" "),s("p",[a._v("为了避免这种情况，我们可以在使用完ThreadLocal后，手动调用remove方法，以避免出现内存泄漏。")]),a._v(" "),s("h3",{attrs:{id:"什么是cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是cas"}},[a._v("#")]),a._v(" 什么是CAS ?")]),a._v(" "),s("p",[a._v("CAS的全称是Compare-And-Swap，它是一条CPU并发原语。")]),a._v(" "),s("h3",{attrs:{id:"cas原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas原理"}},[a._v("#")]),a._v(" CAS原理")]),a._v(" "),s("p",[a._v("在翻了源码之后，大致可以总结出两个关键点：")]),a._v(" "),s("ul",[s("li",[a._v("自旋；")]),a._v(" "),s("li",[a._v("unsafe类。")])]),a._v(" "),s("p",[a._v("当点开compareAndSet方法后:")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// AtomicInteger类内部")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" expect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" valueOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" expect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("通过这个方法，我们可以找出AtomicInteger内部维护了volatile int value和private static final Unsafe unsafe两个比较重要的参数。（注意value是用volatile修饰）")]),a._v(" "),s("p",[a._v("还有变量private static final long valueOffset，表示该变量在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。")]),a._v(" "),s("p",[a._v("变量value用volatile修饰，保证了多线程之间的内存可见性。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// AtomicInteger类内部")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),a._v(" unsafe "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getUnsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" valueOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      valueOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("objectFieldOffset\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getDeclaredField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("然后我们通过compareAndSwapInt找到了unsafe类核心方法：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//unsafe内部类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n  int var5;\n  do {\n      var5 = this.getIntVolatile(var1, var2);\n  } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n  return var5;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("AtomicInteger.compareAndSwapInt()调用了Unsafe.compareAndSwapInt()方法。Unsafe类的大部分方法都是native的，用来像C语言一样从底层操作内存。")]),a._v(" "),s("p",[a._v("这个方法的var1和var2，就是根据对象和偏移量得到在主内存的快照值var5。然后compareAndSwapInt方法通过var1和var2得到当前主内存的实际值。如果这个实际值跟快照值相等，那么就更新主内存的值为var5+var4。如果不等，那么就一直循环，一直获取快照，一直对比，直到实际值和快照值相等为止。")]),a._v(" "),s("p",[a._v("比如有A、B两个线程")]),a._v(" "),s("p",[a._v("一开始都从主内存中拷贝了原值为3；")]),a._v(" "),s("p",[a._v("1、A线程执行到var5=this.getIntVolatile，即var5=3。此时A线程挂起；")]),a._v(" "),s("p",[a._v("2、B修改原值为4，B线程执行完毕，由于加了volatile，所以这个修改是立即可见的；")]),a._v(" "),s("p",[a._v("3、A线程被唤醒，执行this.compareAndSwapInt()方法，发现这个时候主内存的值不等于快照值3，所以继续循环，重新从主内存获取。")]),a._v(" "),s("p",[a._v("4、线程A重新获取value值，因为变量value被volatile修饰，所以其他线程对它的修改，线程A总是能够看到，线程A继续执行compareAndSwapInt进行比较替换，直至成功。")]),a._v(" "),s("h3",{attrs:{id:"aba问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aba问题"}},[a._v("#")]),a._v(" ABA问题")]),a._v(" "),s("p",[a._v("所谓ABA问题，其实用最通俗易懂的话语来总结就是狸猫换太子")]),a._v(" "),s("p",[a._v("就是比较并交换的循环，存在一个时间差，而这个时间差可能带来意想不到的问题。")]),a._v(" "),s("p",[a._v("比如有两个线程A、B：")]),a._v(" "),s("p",[a._v("1、一开始都从主内存中拷贝了原值为3；")]),a._v(" "),s("p",[a._v("2、A线程执行到var5=this.getIntVolatile，即var5=3。此时A线程挂起；")]),a._v(" "),s("p",[a._v("3、B修改原值为4，B线程执行完毕;")]),a._v(" "),s("p",[a._v("4、然后B觉得修改错了，然后再重新把值修改为3；")]),a._v(" "),s("p",[a._v("5、A线程被唤醒，执行this.compareAndSwapInt()方法，发现这个时候主内存的值等于快照值3，（但是却不知道B曾经修改过），修改成功。")]),a._v(" "),s("p",[a._v("尽管线程A CAS操作成功，但不代表就没有问题。有的需求，比如CAS，只注重头和尾，只要首尾一致就接受。但是有的需求，还看重过程，中间不能发生任何修改。这就引出了AtomicReference原子引用。")]),a._v(" "),s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[a._v("#")]),a._v(" 线程池")]),a._v(" "),s("h3",{attrs:{id:"参数解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数解释"}},[a._v("#")]),a._v(" 参数解释")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("corePoolSize")]),a._v("：核心线程数。如果等于0，则任务执行完后，没有任务请求进入时销毁线程池中的线程。如果大于0，即使本地任务执行完毕，核心线程也不会被销毁。设置过大会浪费系统资源，设置过小导致线程频繁创建。")]),a._v(" "),s("li",[s("code",[a._v("maximumPoolSize")]),a._v("：最大线程数。必须大于等于1，且大于等于corePoolSize。如果与corePoolSize相等，则线程池大小固定。如果大于corePoolSize，则最多创建maximumPoolSize个线程执行任务")]),a._v(" "),s("li",[s("code",[a._v("keepAliveTime")]),a._v("：线程空闲时间。线程池中线程空闲时间达到keepAliveTime值时，线程会被销毁，只到剩下corePoolSize个线程为止。默认情况下，线程池的最大线程数大于corePoolSize时，keepAliveTime才会起作用。如果allowCoreThreadTimeOut被设置为true，即使线程池的最大线程数等于corePoolSize，keepAliveTime也会起作用（回收超时的核心线程）。")]),a._v(" "),s("li",[s("code",[a._v("unit")]),a._v("：TimeUnit表示时间单位。")]),a._v(" "),s("li",[s("code",[a._v("workQueue")]),a._v("：缓存队列。当请求线程数大于corePoolSize时，线程进入BlockingQueue阻塞队列。")]),a._v(" "),s("li",[s("code",[a._v("threadFactory")]),a._v("：线程工厂。用来生产一组相同任务的线程。主要用于设置生成的线程名词前缀、是否为守护线程以及优先级等。设置有意义的名称前缀有利于在进行虚拟机分析时，知道线程是由哪个线程工厂创建的。")]),a._v(" "),s("li",[s("code",[a._v("handler")]),a._v("：执行拒绝策略对象。当达到任务缓存上限时（即超过workQueue参数能存储的任务数），执行拒接策略，可以看作简单的限流保护。")])]),a._v(" "),s("h3",{attrs:{id:"三种阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三种阻塞队列"}},[a._v("#")]),a._v(" 三种阻塞队列")]),a._v(" "),s("p",[a._v("首先看一下新任务进入时线程池的执行策略： 如果运行的线程少于corePoolSize，则 Executor始终首选添加新的线程，而不进行排队。（如果当前运行的线程小于corePoolSize，则任务根本不会存入queue中，而是直接运行） 如果运行的线程大于等于 corePoolSize，则 Executor始终首选将请求加入队列，而不添加新的线程。 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 主要有3种类型的BlockingQueue：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("无界队列")]),a._v(" 队列大小无限制，常用的为无界的LinkedBlockingQueue，使用该队列做为阻塞队列时要尤其当心，当任务耗时较长时可能会导致大量新任务在队列中堆积最终导致OOM。最近工作中就遇到因为采用LinkedBlockingQueue作为阻塞队列，部分任务耗时80s＋且不停有新任务进来，导致cpu和内存飙升服务器挂掉。")]),a._v(" "),s("li",[s("strong",[a._v("有界队列")]),a._v(" 常用的有两类，一类是遵循FIFO原则的队列如ArrayBlockingQueue与有界的LinkedBlockingQueue，另一类是优先级队列如PriorityBlockingQueue。PriorityBlockingQueue中的优先级由任务的Comparator决定。 使用有界队列时队列大小需和线程池大小互相配合，线程池较小有界队列较大时可减少内存消耗，降低cpu使用率和上下文切换，但是可能会限制系统吞吐量。")]),a._v(" "),s("li",[s("strong",[a._v("同步移交")]),a._v(" 如果不希望任务在队列中等待而是希望将任务直接移交给工作线程，可使用SynchronousQueue作为等待队列。SynchronousQueue不是一个真正的队列，而是一种线程之间移交的机制。要将一个元素放入SynchronousQueue中，必须有另一个线程正在等待接收这个元素。只有在使用无界线程池或者有饱和策略时才建议使用该队列")])]),a._v(" "),s("h3",{attrs:{id:"四种拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四种拒绝策略"}},[a._v("#")]),a._v(" 四种拒绝策略")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("AbortPolicy中止策略")]),a._v(" 使用该策略时在饱和时会抛出RejectedExecutionException（继承自RuntimeException），调用者可捕获该异常自行处理。")]),a._v(" "),s("li",[s("strong",[a._v("DiscardPolicy抛弃策略")]),a._v(" 不做任何处理直接抛弃任务")]),a._v(" "),s("li",[s("strong",[a._v("DiscardOldestPolicy抛弃旧任务策略")]),a._v(" 先将阻塞队列中的头元素出队抛弃，再尝试提交任务。如果此时阻塞队列使用PriorityBlockingQueue优先级队列，将会导致优先级最高的任务被抛弃，因此不建议将该种策略配合优先级队列使用。")]),a._v(" "),s("li",[s("strong",[a._v("CallerRunsPolicy调用者运行")]),a._v(" 既不抛弃任务也不抛出异常，直接运行任务的run方法，换言之将任务回退给调用者来直接运行。使用该策略时线程池饱和后将由调用线程池的主线程自己来执行任务，因此在执行任务的这段时间里主线程无法再提交新任务，从而使线程池中工作线程有时间将正在处理的任务处理完成")])]),a._v(" "),s("h3",{attrs:{id:"合理配置线程池核心线程数-io密集型和cpu密集型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合理配置线程池核心线程数-io密集型和cpu密集型"}},[a._v("#")]),a._v(" 合理配置线程池核心线程数（IO密集型和CPU密集型）")]),a._v(" "),s("p",[s("strong",[a._v("CPU密集型")])]),a._v(" "),s("p",[a._v("CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。 CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程），而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些。 CPU密集型任务配置尽可能少的线程数量： 一般公式："),s("strong",[a._v("CPU核数+1个线程的线程池")])]),a._v(" "),s("p",[s("strong",[a._v("IO密集型")])]),a._v(" "),s("p",[a._v("IO包括：数据库交互，文件上传下载，网络传输等 方法一： 由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如"),s("strong",[a._v("CPU核数*2")]),a._v(" 方法二： IO密集型，即该任务需要大量的IO，即大量的阻塞。 在单线程上运IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。 所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。 IO密集型时，大部分线程都阻塞，故需要多配置线程数： 参考公式："),s("strong",[a._v("CPU核数 /（1 - 阻系数）")]),a._v(" 比如8核CPU：8/(1 - 0．9)=80个线程数 阻塞系数在0.8~0.9之间")]),a._v(" "),s("h3",{attrs:{id:"如果线程池满了怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果线程池满了怎么办"}},[a._v("#")]),a._v(" 如果线程池满了怎么办")]),a._v(" "),s("p",[s("strong",[a._v("会执行线程拒绝策略")])]),a._v(" "),s("p",[s("strong",[a._v("ThreadPoolExecutor提供了四个公开的内部静态类：")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("AbortPolicy：默认，丢弃任务并抛出RejectedExecutionException异常。")])]),a._v(" "),s("li",[s("p",[a._v("DiscardPolicy：丢弃任务，但是不抛出异常（不推荐）。")])]),a._v(" "),s("li",[s("p",[a._v("DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中。")])]),a._v(" "),s("li",[s("p",[a._v("CallerRunsPolicy：调用任务的run()方法绕过线程池直接执行。")])])]),a._v(" "),s("p",[s("strong",[a._v("友好的拒绝策略：")])]),a._v(" "),s("ul",[s("li",[a._v("保存到数据库进行削峰填谷。在空闲时再提出来执行。")]),a._v(" "),s("li",[a._v("转向某个提示页面")]),a._v(" "),s("li",[a._v("打印日志")])]),a._v(" "),s("h3",{attrs:{id:"为什么要用线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用线程池"}},[a._v("#")]),a._v(" 为什么要用线程池？")]),a._v(" "),s("p",[a._v("池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。")]),a._v(" "),s("p",[a._v("线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。")]),a._v(" "),s("p",[a._v("这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")])]),a._v(" "),s("li",[s("p",[a._v("提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。")])]),a._v(" "),s("li",[s("p",[a._v("提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])])]),a._v(" "),s("h2",{attrs:{id:"守护线程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#守护线程是什么"}},[a._v("#")]),a._v(" 守护线程是什么？")]),a._v(" "),s("p",[a._v("守护线程是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。在 Java 中垃圾回收线程就是特殊的守护线程。")]),a._v(" "),s("h2",{attrs:{id:"线程阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程阻塞"}},[a._v("#")]),a._v(" 线程阻塞")]),a._v(" "),s("p",[a._v("线程阻塞的几个方法")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("线程睡眠")]),a._v(" Thread.sleep (long millis)方法当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。")]),a._v(" "),s("li",[s("strong",[a._v("线程等待")]),a._v(" Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 唤醒方法。")]),a._v(" "),s("li",[s("strong",[a._v("线程礼让")]),a._v(" Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.")]),a._v(" "),s("li",[s("strong",[a._v("线程自闭")]),a._v(" join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。")]),a._v(" "),s("li",[s("strong",[a._v("suspend() 和 resume()")]),a._v(" 两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。"),s("strong",[a._v("Thread中suspend()和resume()两个方法在JDK1.5中已经废除")]),a._v("，不再介绍。因为有死锁倾向。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/a1eb1a5d42116.png",alt:"image.png"}})]),a._v(" "),s("h2",{attrs:{id:"sleep-和-wait-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sleep-和-wait-有什么区别"}},[a._v("#")]),a._v(" sleep() 和 wait() 有什么区别？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("类的不同：sleep() 来自 Thread，wait() 来自 Object。")])]),a._v(" "),s("li",[s("p",[a._v("释放锁：sleep() 不释放锁；wait() 释放锁。")])]),a._v(" "),s("li",[s("p",[a._v("用法不同：sleep() 时间到会自动恢复；wait() 可以使用 notify()/notifyAll()直接唤醒。")])])]),a._v(" "),s("h2",{attrs:{id:"线程的-run-和-start-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的-run-和-start-有什么区别"}},[a._v("#")]),a._v(" 线程的 run() 和 start() 有什么区别？")]),a._v(" "),s("p",[a._v("start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start() 只能调用一次。")]),a._v(" "),s("h2",{attrs:{id:"notify-和-notifyall-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notify-和-notifyall-有什么区别"}},[a._v("#")]),a._v(" notify()和 notifyAll()有什么区别？")]),a._v(" "),s("p",[a._v("notifyAll()会唤醒所有的线程，notify()之后唤醒一个线程。")]),a._v(" "),s("p",[a._v("notifyAll() 调用后，会将全部线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，如果不成功则留在锁池等待锁被释放后再次参与竞争。")]),a._v(" "),s("p",[a._v("而 notify()只会唤醒一个线程，具体唤醒哪一个线程由虚拟机控制。")]),a._v(" "),s("h2",{attrs:{id:"公平锁和非公平锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公平锁和非公平锁"}},[a._v("#")]),a._v(" 公平锁和非公平锁")]),a._v(" "),s("p",[a._v("具体请看："),s("a",{attrs:{href:"https://blog.csdn.net/weixin_44777669/article/details/115346888",target:"_blank",rel:"noopener noreferrer"}},[a._v("公平锁和非公平锁-ReentrantLock是如何实现公平、非公平的_冷雨清的博客-CSDN博客"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("公平锁和非公平锁，主要是在方法 tryAcquire 中，是否有 !hasQueuedPredecessors() 判断。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FairSync")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sync")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" acquires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasQueuedPredecessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSetState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" acquires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setExclusiveOwnerThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("公平锁：是直接加入到队尾中")]),a._v(" "),s("p",[a._v("非公平锁：会队列中是否存在一个线程（先于当前线程）”，如果存在话，当前线程就要加入到队列的尾部，没有则直接获取到锁")])])}),[],!1,null,null,null);t.default=e.exports}}]);