(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{440:function(e,t,n){"use strict";n.r(t);var s=n(21),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"socket编程-网络编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket编程-网络编程"}},[e._v("#")]),e._v(" Socket编程（网络编程）")]),e._v(" "),n("p",[e._v("基于 TCP 的网络编程开发分为服务器端和客户端两部分，常见的核心步骤和流程如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/12/8c3c74a6f808e.png",alt:"image.png"}})]),e._v(" "),n("h4",{attrs:{id:"socket-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-函数"}},[e._v("#")]),e._v(" socket()函数")]),e._v(" "),n("p",[e._v("socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而 "),n("strong",[e._v("socket()")]),e._v(" 用于创建一个socket描述符（socket descriptor），它唯一标识一个socket。这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。函数定义如下：")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int socket(int domain, int type, int protocol);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("domain：即协议域，又称为协议族（family）。常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。")]),e._v(" "),n("li",[e._v("type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等（socket的类型有哪些？）。")]),e._v(" "),n("li",[e._v("protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。")])]),e._v(" "),n("p",[e._v("注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。")]),e._v(" "),n("p",[e._v("当我们调用"),n("strong",[e._v("socket")]),e._v("创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。")]),e._v(" "),n("h4",{attrs:{id:"bind-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind-函数"}},[e._v("#")]),e._v(" bind()函数")]),e._v(" "),n("p",[e._v("正如上面所说bind()函数把一个地址族中的特定地址赋给socket。例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。")]),e._v(" "),n("li",[e._v("addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同")]),e._v(" "),n("li",[e._v("addrlen：对应的是地址的长度。")])]),e._v(" "),n("p",[e._v("通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。")]),e._v(" "),n("h4",{attrs:{id:"connect-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect-函数"}},[e._v("#")]),e._v(" connect()函数")]),e._v(" "),n("p",[e._v("对于客户端的 connect() 函数，该函数的功能为客户端主动连接服务器，建立连接是通过"),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("三次握手 (opens new window)"),n("OutboundLink")],1),e._v("，而"),n("strong",[e._v("这个连接的过程是由内核完成")]),e._v("，不是这个函数完成的，这个函数的作用仅仅是通知 Linux 内核，让 Linux 内核自动完成 "),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("TCP 三次握手 (opens new window)"),n("OutboundLink")],1),e._v("连接（"),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("三次握手详情，请看《浅谈 TCP 三次握手》 (opens new window)"),n("OutboundLink")],1),e._v("），最后把连接的结果返回给这个函数的返回值（成功连接为0， 失败为-1）。")]),e._v(" "),n("p",[e._v("通常的情况，客户端的 connect() 函数默认会一直阻塞，直到"),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("三次握手 (opens new window)"),n("OutboundLink")],1),e._v("成功或超时失败才返回（正常的情况，这个过程很快完成）。")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。")]),e._v(" "),n("h4",{attrs:{id:"listen-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#listen-函数"}},[e._v("#")]),e._v(" listen()函数")]),e._v(" "),n("p",[e._v("对于服务器，它是被动连接的。举一个生活中的例子，通常的情况下，移动的客服（相当于服务器）是等待着客户（相当于客户端）电话的到来。而这个过程，需要调用listen()函数。")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#include<sys/socket.h>\nint listen(int sockfd, int backlog);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("listen() 函数的主要作用就是将套接字( sockfd )变成被动的连接监听套接字（被动等待客户端的连接），至于参数 backlog 的作用是设置内核中连接队列的长度， "),n("code",[e._v("TCP 三次握手也不是由这个函数完成，listen()的作用仅仅告诉内核一些信息。")])]),e._v(" "),n("p",[e._v("第二个参数（ backlog）的作用：告诉内核连接队列的长度。")]),e._v(" "),n("p",[e._v("为了更好的理解 backlog 参数，我们必须认识到内核为任何一个给定的监听套接口维护两个队列：")]),e._v(" "),n("p",[e._v("1、未完成连接队列（incomplete connection queue），每个这样的 SYN 分节对应其中一项：已由某个客户发出并到达服务器，而服务器正在等待完成相应的 TCP "),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("三次握手 (opens new window)"),n("OutboundLink")],1),e._v("过程。这些套接口处于 SYN_RCVD 状态。")]),e._v(" "),n("p",[e._v("2、已完成连接队列（completed connection queue），每个已完成 TCP "),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("三次握手 (opens new window)"),n("OutboundLink")],1),e._v("过程的客户对应其中一项。这些套接口处于 ESTABLISHED 状态。")]),e._v(" "),n("p",[e._v("当来自客户的 SYN 到达时，TCP 在未完成连接队列中创建一个新项，然后响应以三次握手的第二个分节：服务器的 SYN 响应，其中稍带对客户 SYN 的 ACK（即SYN+ACK），这一项一直保留在未完成连接队列中，直到三次握手的第三个分节（客户对服务器 SYN 的 ACK ）到达或者该项超时为止（曾经源自Berkeley的实现为这些未完成连接的项设置的超时值为75秒）。")]),e._v(" "),n("p",[e._v("如果三次握手正常完成，该项就从未完成连接队列移到已完成连接队列的队尾。")]),e._v(" "),n("p",[n("strong",[e._v("这里需要注意的是")]),e._v(" listen()函数不会阻塞，它主要做的事情为，将该套接字和套接字对应的连接队列长度告诉 Linux 内核，然后，listen()函数就结束。")]),e._v(" "),n("p",[e._v("这样的话，当有一个客户端主动连接（connect()），Linux 内核就自动完成"),n("a",{attrs:{href:"http://blog.csdn.net/tennysonsky/article/details/45622395",target:"_blank",rel:"noopener noreferrer"}},[e._v("TCP 三次握手 (opens new window)"),n("OutboundLink")],1),e._v("，将建立好的链接自动存储到队列中，如此重复。")]),e._v(" "),n("p",[e._v("所以，只要 TCP 服务器调用了 listen()，客户端就可以通过 connect() 和服务器建立连接，而 "),n("strong",[e._v("这个连接的过程是由内核完成")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"accept-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#accept-函数"}},[e._v("#")]),e._v(" accept()函数")]),e._v(" "),n("p",[e._v("accept()函数功能是，从处于 established 状态的连接队列头部取出一个已经完成的连接，如果这个队列没有已经完成的连接，accept()函数就会阻塞，直到取出队列中已完成的用户连接为止。")]),e._v(" "),n("p",[e._v("如果，服务器不能及时调用 accept() 取走队列中已完成的连接，队列满掉后会怎样呢？UNP（《unix网络编程》）告诉我们，服务器的连接队列满掉后，服务器不会对再对建立新连接的syn进行应答，所以客户端的 connect 就会返回 ETIMEDOUT。"),n("strong",[e._v("但实际上Linux的并不是这样的！")])]),e._v(" "),n("p",[n("strong",[e._v("TCP 的连接队列满后，Linux 不会如书中所说的拒绝连接")]),e._v("，只是有些会延时连接，"),n("strong",[e._v("而且")]),e._v("accept()未必能把已经建立好的连接全部取出来（如：当队列的长度指定为 0 ），写程序时服务器的 listen() 的第二个参数最好还是根据需要填写，写太大不好（具体可以看cat /proc/sys/net/core/somaxconn，默认最大值限制是 128），浪费资源，写太小也不好，延时建立连接。")]),e._v(" "),n("h4",{attrs:{id:"read-、write-等函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-、write-等函数"}},[e._v("#")]),e._v(" read()、write()等函数")]),e._v(" "),n("p",[e._v("万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信！网络I/O操作有下面几组：")]),e._v(" "),n("ul",[n("li",[e._v("read()/write()")]),e._v(" "),n("li",[e._v("recv()/send()")]),e._v(" "),n("li",[e._v("readv()/writev()")]),e._v(" "),n("li",[e._v("recvmsg()/sendmsg()")]),e._v(" "),n("li",[e._v("recvfrom()/sendto()")])]),e._v(" "),n("p",[e._v("read函数是负责从fd中读取内容.当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。")]),e._v(" "),n("p",[e._v("write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数。失败时返回-1，并设置errno变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1)write的返回值大于0，表示写了部分或者是全部的数据。2)返回的值小于0，此时出现了错误。我们要根据错误类型来处理。如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接)。")]),e._v(" "),n("p",[n("strong",[e._v("close函数")])]),e._v(" "),n("p",[e._v("在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。")]),e._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int close(int fd);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。")]),e._v(" "),n("p",[e._v("注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。")])])}),[],!1,null,null,null);t.default=r.exports}}]);