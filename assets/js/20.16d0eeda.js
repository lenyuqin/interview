(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{427:function(a,t,e){"use strict";e.r(t);var i=e(21),r=Object(i.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"循环依赖问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖问题"}},[a._v("#")]),a._v(" 循环依赖问题")]),a._v(" "),e("p",[a._v("由SpringIOC去创建bean对象，主要有两个问题，一个死循环的创建，一个是AOP的代理。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312141105830.png",alt:"image-20210312141105830"}})]),a._v(" "),e("p",[a._v("bean的创建过程\n先会去工厂里面获取，工厂去单例池获取bean对象，如果里面没有就创建，有就直接返回")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312141505291.png",alt:"image-20210312141505291"}})]),a._v(" "),e("p",[a._v("先去getBean->然后通过反射实例化（createBeanInstance(“a”)）->填充属性(populate(“b”))->初始化（执行Bean里面的初始化方法）创建完以后就放到单例池里面，然后再返回出去（如下图）")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312142219904.png",alt:"image-20210312142219904"}})]),a._v(" "),e("p",[a._v("当a里面有一个对象引用b，就会如下图所示，执行初始化操作（递归操作），但由于又要初始化a，就出现死循环")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312142342063.png",alt:"image-20210312142342063"}})]),a._v(" "),e("h3",{attrs:{id:"死循环的创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#死循环的创建"}},[a._v("#")]),a._v(" 死循环的创建")]),a._v(" "),e("p",[a._v("由两级缓存就可以实现：一个是单例池，一个是半成品池")]),a._v(" "),e("h3",{attrs:{id:"创建过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建过程"}},[a._v("#")]),a._v(" 创建过程")]),a._v(" "),e("ol",[e("li",[a._v("先去获取a，但a实例化的时候，就会把a放到半成品池中去，")]),a._v(" "),e("li",[a._v("然后去填充属性b，然后获取b，")]),a._v(" "),e("li",[a._v("b在单例池中判断是否有a，如果没有就去半成品池中去获取，")]),a._v(" "),e("li",[a._v("如果半成品中有把a放到b中就进行填充和初始化，然后b初始化成功，b 就可以放到单例池中，")]),a._v(" "),e("li",[a._v("而后a就可以在单例池中获取到b进行属性填充，最后也初始化成功，将a放入到单例池中")])]),a._v(" "),e("p",[a._v("(这里有点绕，总之就是半成品池做了个中间媒介)")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312143658701.png",alt:"image-20210312143658701"}})]),a._v(" "),e("h3",{attrs:{id:"aop的代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop的代理"}},[a._v("#")]),a._v(" AOP的代理")]),a._v(" "),e("p",[a._v("因为对象a和对象b是代理对象（封装了一层），需要解决AOP代理的问题，而里面的对象引用也不是引用对象本身了，而是引用代理对象！而半成品池里面是对象本身，所以二级缓存不行，就得三级缓存来实现")]),a._v(" "),e("p",[a._v("三级缓存实现：一个是单例池，一个是半成品池，一个是对象工厂池")]),a._v(" "),e("p",[e("strong",[a._v("代理对象的产生是在初始化的时候产生的")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312144229831.png",alt:"image-20210312144229831"}})]),a._v(" "),e("p",[a._v("代理对象的产生如上图所示：")]),a._v(" "),e("p",[a._v("首先初始化的时候会调用bean处理器，而这个处理器里面包含了一个AOP的处理器")]),a._v(" "),e("p",[a._v("AOP处理器会调用createproxy创建代理对象")]),a._v(" "),e("p",[a._v("调用createproxy有两种途径，一个是后置处理器（正常途径），一个是提前处理器（解决问题的关键）")]),a._v(" "),e("h3",{attrs:{id:"过程-有点绕-需要好好理解一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过程-有点绕-需要好好理解一下"}},[a._v("#")]),a._v(" 过程（有点绕，需要好好理解一下）")]),a._v(" "),e("ol",[e("li",[a._v("当a实例化的时候就会在工厂池里面创建一个factory(a) a的对象工厂,这个对象工厂可以调用提前处理，创建一个a的代理对象，当然这个factory(a)并不会自动的调用，只有当b需要填充属性的时候才会调用")]),a._v(" "),e("li",[a._v("当b填充属性调用factory(a) factory(a)会提前引用创建出来了一个代理对象a，会放入半成品池中，然后把半成品池中的a，填充到b中")]),a._v(" "),e("li",[a._v("b就初始化完成，通过后置处理创建出b的代理对象放入单例池中（在b实例化的时候也会创建factory(b)，但无人引用就销毁了）")]),a._v(" "),e("li",[a._v("a填充属性，由于单例池中有b了就直接填充进去了，然后执行初始化、后置处理创建动态代理，由于半成品池中有了a的代理对象，所以直接把半成品池中直接拿到单例池，同时再把factory(a)销毁，这样两个代理对象就都创建出来了")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312145300317.png",alt:"image-20210312145300317"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/lenyuqin/images/raw/master/img/image-20210312145142427.png",alt:"image-20210312145142427"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);